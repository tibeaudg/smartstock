// BlogPost CRUD functions
import type { BlogPost } from './types';

export async function fetchBlogPosts(): Promise<BlogPost[]> {
  const { data, error } = await supabase.from('blogposts').select('*').order('date_published', { ascending: false });
  if (error) throw error;
  return data || [];
}

export async function addBlogPost(post: Omit<BlogPost, 'id'>): Promise<BlogPost> {
  const { data, error } = await supabase.from('blogposts').insert([post]).select();
  if (error) throw error;
  return data?.[0];
}

export async function updateBlogPost(id: string, post: Partial<BlogPost>): Promise<BlogPost> {
  const { data, error } = await supabase.from('blogposts').update(post).eq('id', id).select();
  if (error) throw error;
  return data?.[0];
}

export async function deleteBlogPost(id: string): Promise<void> {
  const { error } = await supabase.from('blogposts').delete().eq('id', id);
  if (error) throw error;
}

export async function fetchBlogPostBySlug(slug: string): Promise<BlogPost | null> {
  const { data, error } = await supabase
    .from('blogposts')
    .select('*')
    .eq('slug', slug)
    .single();
  
  if (error) {
    if (error.code === 'PGRST116') { // Record not found
      return null;
    }
    throw error;
  }
  
  return data;
}
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || "https://sszuxnqhbxauvershuys.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNzenV4bnFoYnhhdXZlcnNodXlzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDk4OTEyODYsImV4cCI6MjA2NTQ2NzI4Nn0.-jvEJ1uUwdcJKZ1JbgOtD6jr-e0FoeepPrj8rpSFviQ";

if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  throw new Error('Missing Supabase credentials');
}

// Create a safe storage fallback for environments where localStorage is not available
function getSafeLocalStorage() {
  try {
    if (typeof window !== 'undefined' && window.localStorage) {
      // Test access
      const testKey = '__test__';
      window.localStorage.setItem(testKey, '1');
      window.localStorage.removeItem(testKey);
      return window.localStorage;
    }
  } catch (e) {
    // localStorage is not available (private mode, security, etc.)
  }
  // Fallback: in-memory storage (not persistent)
  let store = {};
  return {
    getItem: (key) => (key in store ? store[key] : null),
    setItem: (key, value) => { store[key] = value; },
    removeItem: (key) => { delete store[key]; },
    clear: () => { store = {}; },
  };
}

// Create Supabase client with proper configuration
export const supabase = createClient<Database>(
  SUPABASE_URL,
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      storageKey: 'smart-inventory-auth',
      storage: getSafeLocalStorage(),
      autoRefreshToken: true,
      detectSessionInUrl: true,  // <-- Enable this to handle session tokens from URL automatically
    },
    global: {
      headers: {
        'x-application-name': 'smart-inventory'
      }
    }
  }
);

// Listen for auth state changes
supabase.auth.onAuthStateChange((event, session) => {
  // Auth state change logging removed for production security
});

// Export a function to check connection
export const checkSupabaseConnection = async () => {
  try {
    const { data, error } = await supabase.from('profiles').select('count');
    if (error) {
      console.error('Supabase connection test failed:', error);
      return false;
    }
    return true;
  } catch (error) {
    console.error('Supabase connection test exception:', error);
    return false;
  }
};
