import React, { useState, useEffect } from 'react';
import { fetchBlogPosts, addBlogPost, updateBlogPost, deleteBlogPost } from '../integrations/supabase/client';

export default function AdminCMS() {
  const [posts, setPosts] = useState([]);
  const [editing, setEditing] = useState(null);
  const [form, setForm] = useState({
    title: '',
    slug: '',
    content: '',
    metaTitle: '',
    metaDescription: '',
    datePublished: new Date().toISOString().slice(0, 10)
  });
  const [showPreview, setShowPreview] = useState(false);

  useEffect(() => {
    fetchBlogPosts().then(setPosts).catch(console.error);
  }, []);

  // Auto-generate slug, meta title, and meta description from title
  const handleTitleChange = (title) => {
    const slug = title
      .toLowerCase()
      .replace(/[^a-z0-9]+/g, '-')
      .replace(/^-+|-+$/g, '')
      .replace(/--+/g, '-');
    setForm(form => ({
      ...form,
      title,
      slug,
      metaTitle: title,
      metaDescription: `Lees meer over ${title} op StockFlow.`
    }));
  };

  const handleEdit = (post) => {
    setEditing(post.id);
    setForm({
      title: post.title,
      slug: post.slug,
      content: post.content,
      metaTitle: post.meta_title,
      metaDescription: post.meta_description,
      datePublished: post.date_published || new Date().toISOString().slice(0, 10)
    });
    setShowPreview(false);
  };

  const handleSave = async () => {
    try {
      const updated = await updateBlogPost(editing, {
        title: form.title,
        slug: form.slug,
        content: form.content,
        meta_title: form.metaTitle,
        meta_description: form.metaDescription,
        date_published: form.datePublished
      });
      setPosts(posts.map(p => p.id === editing ? updated : p));
      setEditing(null);
      setShowPreview(true);
    } catch (err) {
      alert('Failed to update post: ' + err.message);
    }
  };

  const handleAdd = async () => {
    try {
      const newPost = await addBlogPost({
        title: form.title,
        slug: form.slug,
        content: form.content,
        meta_title: form.metaTitle,
        meta_description: form.metaDescription,
        date_published: form.datePublished
      });
      setPosts([...posts, newPost]);
      setForm({
        title: '',
        slug: '',
        content: '',
        metaTitle: '',
        metaDescription: '',
        datePublished: new Date().toISOString().slice(0, 10)
      });
      setShowPreview(true);
    } catch (err) {
      alert('Failed to add post: ' + err.message);
    }
  };

  const handleDelete = async (id) => {
    if (window.confirm('Delete this post?')) {
      try {
        await deleteBlogPost(id);
        setPosts(posts.filter(p => p.id !== id));
      } catch (err) {
        alert('Failed to delete post: ' + err.message);
      }
    }
  };

  return (
    <div style={{ maxWidth: 800, margin: '40px auto', padding: 24, background: '#f9f9f9', borderRadius: 12, boxShadow: '0 2px 8px #ddd' }}>
      <h2 style={{ textAlign: 'center', marginBottom: 24 }}>Blogpost CMS</h2>
      <form style={{ display: 'flex', flexDirection: 'column', gap: 12, background: '#fff', padding: 20, borderRadius: 8, boxShadow: '0 1px 4px #eee' }}>
        <input className="cms-input" placeholder="Title" value={form.title} onChange={e => handleTitleChange(e.target.value)} />
        <input className="cms-input" placeholder="Slug" value={form.slug} readOnly />
        <textarea className="cms-input" placeholder="Content" value={form.content} onChange={e => setForm({ ...form, content: e.target.value })} rows={4} />
        <input className="cms-input" placeholder="Meta Title" value={form.metaTitle} readOnly />
        <input className="cms-input" placeholder="Meta Description" value={form.metaDescription} readOnly />
        <input className="cms-input" type="date" placeholder="Date Published" value={form.datePublished} onChange={e => setForm({ ...form, datePublished: e.target.value })} />
        <div style={{ display: 'flex', gap: 12 }}>
          {editing ? (
            <button type="button" onClick={handleSave} style={{ background: '#007bff', color: '#fff', border: 'none', padding: '8px 16px', borderRadius: 4 }}>Save</button>
          ) : (
            <button type="button" onClick={handleAdd} style={{ background: '#28a745', color: '#fff', border: 'none', padding: '8px 16px', borderRadius: 4 }}>Add</button>
          )}
          <button type="button" onClick={() => setShowPreview(true)} style={{ background: '#6c757d', color: '#fff', border: 'none', padding: '8px 16px', borderRadius: 4 }}>Preview</button>
        </div>
      </form>

      {/* Preview Module */}
      {showPreview && (
        <div style={{ marginTop: 32, background: '#fff', padding: 20, borderRadius: 8, boxShadow: '0 1px 4px #eee' }}>
          <h3>Post Preview</h3>
          <h4>{form.title || '(No Title)'}</h4>
          <p><strong>Slug:</strong> {form.slug}</p>
          <p><strong>Date Published:</strong> {form.datePublished}</p>
          <div style={{ margin: '12px 0', whiteSpace: 'pre-wrap', background: '#f6f6f6', padding: 12, borderRadius: 4 }}>
            {form.content || '(No Content)'}
          </div>
          <div style={{ fontSize: '0.95em', color: '#555' }}>
            <p><strong>Meta Title:</strong> {form.metaTitle}</p>
            <p><strong>Meta Description:</strong> {form.metaDescription}</p>
          </div>
          {form.slug && (
            <a href={`/${form.slug}`} target="_blank" rel="noopener" style={{ display: 'inline-block', marginTop: 16, background: '#007bff', color: '#fff', padding: '8px 16px', borderRadius: 4, textDecoration: 'none' }}>Open Post Page</a>
          )}
        </div>
      )}

      <div style={{ marginTop: 40 }}>
        <h3>All Blogposts</h3>
        <ul style={{ listStyle: 'none', padding: 0 }}>
          {posts.map(post => (
            <li key={post.id} style={{ background: '#fff', marginBottom: 12, padding: 16, borderRadius: 8, boxShadow: '0 1px 4px #eee', display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
              <div>
                <strong>{post.title}</strong> <span style={{ color: '#888' }}>({post.slug})</span>
              </div>
              <div style={{ display: 'flex', gap: 8 }}>
                <button onClick={() => handleEdit(post)} style={{ background: '#ffc107', color: '#333', border: 'none', padding: '6px 12px', borderRadius: 4 }}>Edit</button>
                <a href={`/${post.slug}`} target="_blank" rel="noopener" style={{ background: '#007bff', color: '#fff', padding: '6px 12px', borderRadius: 4, textDecoration: 'none' }}>View</a>
                <button onClick={() => handleDelete(post.id)} style={{ background: '#dc3545', color: '#fff', border: 'none', padding: '6px 12px', borderRadius: 4 }}>Delete</button>
              </div>
            </li>
          ))}
        </ul>
      </div>
    </div>
  );
}
import React, { useState, useEffect } from 'react';
import { fetchBlogPosts, addBlogPost, updateBlogPost, deleteBlogPost } from '../integrations/supabase/client';

export default function AdminCMS() {
  const [posts, setPosts] = useState([]);
  const [editing, setEditing] = useState(null);
  const [form, setForm] = useState({
    title: '',
    slug: '',
    content: '',
    metaTitle: '',
    metaDescription: '',
    datePublished: new Date().toISOString().slice(0, 10)
  });
  const [showPreview, setShowPreview] = useState(false);

  useEffect(() => {
    fetchBlogPosts().then(setPosts).catch(console.error);
  }, []);

  // Auto-generate slug, meta title, and meta description from title
  const handleTitleChange = (title) => {
    const slug = title
      .toLowerCase()
      .replace(/[^a-z0-9]+/g, '-')
      .replace(/^-+|-+$/g, '')
      .replace(/--+/g, '-');
    setForm(form => ({
      ...form,
      title,
      slug,
      metaTitle: title,
      metaDescription: `Lees meer over ${title} op StockFlow.`
    }));
  };

  const handleEdit = (post) => {
    setEditing(post.id);
    setForm({
      title: post.title,
      slug: post.slug,
      content: post.content,
      metaTitle: post.meta_title,
      metaDescription: post.meta_description,
      datePublished: post.date_published || new Date().toISOString().slice(0, 10)
    });
    setShowPreview(false);
  };

  const handleSave = async () => {
    try {
      const updated = await updateBlogPost(editing, {
        title: form.title,
        slug: form.slug,
        content: form.content,
        meta_title: form.metaTitle,
        meta_description: form.metaDescription,
        date_published: form.datePublished
      });
      setPosts(posts.map(p => p.id === editing ? updated : p));
      setEditing(null);
      setShowPreview(true);
    } catch (err) {
      alert('Failed to update post: ' + err.message);
    }
  };

  const handleAdd = async () => {
    try {
      const newPost = await addBlogPost({
        title: form.title,
        slug: form.slug,
        content: form.content,
        meta_title: form.metaTitle,
        meta_description: form.metaDescription,
        date_published: form.datePublished
      });
      setPosts([...posts, newPost]);
      setForm({
        title: '',
        slug: '',
        content: '',
        metaTitle: '',
        metaDescription: '',
        datePublished: new Date().toISOString().slice(0, 10)
      });
      setShowPreview(true);
    } catch (err) {
      alert('Failed to add post: ' + err.message);
    }
  };

  const handleDelete = async (id) => {
    if (window.confirm('Delete this post?')) {
      try {
        await deleteBlogPost(id);
        setPosts(posts.filter(p => p.id !== id));
      } catch (err) {
        alert('Failed to delete post: ' + err.message);
      }
    }
  };

  return (
    <div style={{ maxWidth: 800, margin: '40px auto', padding: 24, background: '#f9f9f9', borderRadius: 12, boxShadow: '0 2px 8px #ddd' }}>
      <h2 style={{ textAlign: 'center', marginBottom: 24 }}>Blogpost CMS</h2>
      <form style={{ display: 'flex', flexDirection: 'column', gap: 12, background: '#fff', padding: 20, borderRadius: 8, boxShadow: '0 1px 4px #eee' }}>
        <input className="cms-input" placeholder="Title" value={form.title} onChange={e => handleTitleChange(e.target.value)} />
        <input className="cms-input" placeholder="Slug" value={form.slug} readOnly />
        <textarea className="cms-input" placeholder="Content" value={form.content} onChange={e => setForm({ ...form, content: e.target.value })} rows={4} />
        <input className="cms-input" placeholder="Meta Title" value={form.metaTitle} readOnly />
        <input className="cms-input" placeholder="Meta Description" value={form.metaDescription} readOnly />
        <input className="cms-input" type="date" placeholder="Date Published" value={form.datePublished} onChange={e => setForm({ ...form, datePublished: e.target.value })} />
        <div style={{ display: 'flex', gap: 12 }}>
          {editing ? (
            <button type="button" onClick={handleSave} style={{ background: '#007bff', color: '#fff', border: 'none', padding: '8px 16px', borderRadius: 4 }}>Save</button>
          ) : (
            <button type="button" onClick={handleAdd} style={{ background: '#28a745', color: '#fff', border: 'none', padding: '8px 16px', borderRadius: 4 }}>Add</button>
          )}
          <button type="button" onClick={() => setShowPreview(true)} style={{ background: '#6c757d', color: '#fff', border: 'none', padding: '8px 16px', borderRadius: 4 }}>Preview</button>
        </div>
      </form>

      {/* Preview Module */}
      {showPreview && (
        <div style={{ marginTop: 32, background: '#fff', padding: 20, borderRadius: 8, boxShadow: '0 1px 4px #eee' }}>
          <h3>Post Preview</h3>
          <h4>{form.title || '(No Title)'}</h4>
          <p><strong>Slug:</strong> {form.slug}</p>
          <p><strong>Date Published:</strong> {form.datePublished}</p>
          <div style={{ margin: '12px 0', whiteSpace: 'pre-wrap', background: '#f6f6f6', padding: 12, borderRadius: 4 }}>
            {form.content || '(No Content)'}
          </div>
          <div style={{ fontSize: '0.95em', color: '#555' }}>
            <p><strong>Meta Title:</strong> {form.metaTitle}</p>
            <p><strong>Meta Description:</strong> {form.metaDescription}</p>
          </div>
          {form.slug && (
            <a href={`/${form.slug}`} target="_blank" rel="noopener" style={{ display: 'inline-block', marginTop: 16, background: '#007bff', color: '#fff', padding: '8px 16px', borderRadius: 4, textDecoration: 'none' }}>Open Post Page</a>
          )}
        </div>
      )}

      <div style={{ marginTop: 40 }}>
        <h3>All Blogposts</h3>
        <ul style={{ listStyle: 'none', padding: 0 }}>
          {posts.map(post => (
            <li key={post.id} style={{ background: '#fff', marginBottom: 12, padding: 16, borderRadius: 8, boxShadow: '0 1px 4px #eee', display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
              <div>
                <strong>{post.title}</strong> <span style={{ color: '#888' }}>({post.slug})</span>
              </div>
              <div style={{ display: 'flex', gap: 8 }}>
                <button onClick={() => handleEdit(post)} style={{ background: '#ffc107', color: '#333', border: 'none', padding: '6px 12px', borderRadius: 4 }}>Edit</button>
                <a href={`/${post.slug}`} target="_blank" rel="noopener" style={{ background: '#007bff', color: '#fff', padding: '6px 12px', borderRadius: 4, textDecoration: 'none' }}>View</a>
                <button onClick={() => handleDelete(post.id)} style={{ background: '#dc3545', color: '#fff', border: 'none', padding: '6px 12px', borderRadius: 4 }}>Delete</button>
              </div>
            </li>
          ))}
        </ul>
      </div>
    </div>
  );
}

import React, { useState, useEffect } from 'react';
import { fetchBlogPosts, addBlogPost, updateBlogPost, deleteBlogPost } from '../integrations/supabase/client';

export default function AdminCMS() {
  const [posts, setPosts] = useState([]);
  // Load posts from Supabase on mount
  useEffect(() => {
    fetchBlogPosts().then(setPosts).catch(console.error);
  }, []);
  const [editing, setEditing] = useState(null);
  const [form, setForm] = useState({
    title: '',
    slug: '',
    content: '',
    metaTitle: '',
    metaDescription: '',
    ogImage: '',
    published: false,
    datePublished: new Date().toISOString().slice(0, 10),
    author: 'Admin'
  });
  const [showPreview, setShowPreview] = useState(false);

  const handleEdit = (post) => {
    setEditing(post.id);
    setForm({
      title: post.title,
      slug: post.slug,
      content: post.content,
      metaTitle: post.seo.metaTitle,
      metaDescription: post.seo.metaDescription,
      ogImage: post.seo.ogImage,
      published: post.published,
      datePublished: post.datePublished || new Date().toISOString().slice(0, 10),
      author: post.author || 'Admin'
    });
    setShowPreview(false);
  };

  const handleSave = async () => {
      setForm({
        title: '',
        slug: '',
        content: '',
        metaTitle: '',
        metaDescription: '',
        datePublished: new Date().toISOString().slice(0, 10)
      });
      setShowPreview(true);
    } catch (err) {
      alert('Failed to add post: ' + err.message);
    }
          datePublished: new Date().toISOString().slice(0, 10)
        });
        title: form.title,
        slug: form.slug,
        content: form.content,
        meta_title: form.metaTitle,
        meta_description: form.metaDescription,
        og_image: form.ogImage,
        published: form.published,
        date_published: form.datePublished,
            metaTitle: post.meta_title,
            metaDescription: post.meta_description,
            datePublished: post.date_published || new Date().toISOString().slice(0, 10)
        content: '',
        metaTitle: '',
        metaDescription: '',
        ogImage: '',
        published: false,
        datePublished: new Date().toISOString().slice(0, 10),
        author: 'Admin'
      });
      setShowPreview(true);
    } catch (err) {
      alert('Failed to add post: ' + err.message);
    }
              date_published: form.datePublished
      <h2 style={{ textAlign: 'center', marginBottom: 24 }}>Blogpost CMS</h2>
      <form style={{ display: 'flex', flexDirection: 'column', gap: 12, background: '#fff', padding: 20, borderRadius: 8, boxShadow: '0 1px 4px #eee' }}>
        <input className="cms-input" placeholder="Title" value={form.title} onChange={e => setForm({ ...form, title: e.target.value })} />
        <input className="cms-input" placeholder="Slug" value={form.slug} onChange={e => setForm({ ...form, slug: e.target.value })} />
        <textarea className="cms-input" placeholder="Content" value={form.content} onChange={e => setForm({ ...form, content: e.target.value })} rows={4} />
        <input className="cms-input" placeholder="Meta Title" value={form.metaTitle} onChange={e => setForm({ ...form, metaTitle: e.target.value })} />
        <input className="cms-input" placeholder="Meta Description" value={form.metaDescription} onChange={e => setForm({ ...form, metaDescription: e.target.value })} />
        <input className="cms-input" placeholder="OG Image" value={form.ogImage} onChange={e => setForm({ ...form, ogImage: e.target.value })} />
        <input className="cms-input" placeholder="Author" value={form.author} onChange={e => setForm({ ...form, author: e.target.value })} />
        <input className="cms-input" type="date" placeholder="Date Published" value={form.datePublished} onChange={e => setForm({ ...form, datePublished: e.target.value })} />
        <label style={{ display: 'flex', alignItems: 'center', gap: 8 }}>
          <input type="checkbox" checked={form.published} onChange={e => setForm({ ...form, published: e.target.checked })} /> Published
        </label>
        <div style={{ display: 'flex', gap: 12 }}>
          {editing ? (
            <button type="button" onClick={handleSave} style={{ background: '#007bff', color: '#fff', border: 'none', padding: '8px 16px', borderRadius: 4 }}>Save</button>
          ) : (
              date_published: form.datePublished
      </form>

      {/* Preview Module */}
      {showPreview && (
        <div style={{ marginTop: 32, background: '#fff', padding: 20, borderRadius: 8, boxShadow: '0 1px 4px #eee' }}>
          <h3>Post Preview</h3>
          <h4>{form.title || '(No Title)'}</h4>
          <p><strong>Slug:</strong> {form.slug}</p>
          <p><strong>Published:</strong> {form.published ? 'Yes' : 'No'}</p>
          <p><strong>Author:</strong> {form.author}</p>
          <p><strong>Date Published:</strong> {form.datePublished}</p>
          <div style={{ margin: '12px 0', whiteSpace: 'pre-wrap', background: '#f6f6f6', padding: 12, borderRadius: 4 }}>
            {form.content || '(No Content)'}
          </div>
          <div style={{ fontSize: '0.95em', color: '#555' }}>
            <p><strong>Meta Title:</strong> {form.metaTitle}</p>

        export default function AdminCMS() {
          const [posts, setPosts] = useState([]);
          const [editing, setEditing] = useState(null);
          const [form, setForm] = useState({
            title: '',
            slug: '',
            content: '',
            metaTitle: '',
            metaDescription: '',
            datePublished: new Date().toISOString().slice(0, 10)
          });
          const [showPreview, setShowPreview] = useState(false);

          useEffect(() => {
            fetchBlogPosts().then(setPosts).catch(console.error);
          }, []);

          // Auto-generate slug, meta title, and meta description from title
          const handleTitleChange = (title) => {
            const slug = title
              .toLowerCase()
              .replace(/[^a-z0-9]+/g, '-')
              .replace(/^-+|-+$/g, '')
              .replace(/--+/g, '-');
            setForm(form => ({
              ...form,
              title,
              slug,
              metaTitle: title,
              metaDescription: `Lees meer over ${title} op StockFlow.`
            }));
          };

          const handleEdit = (post) => {
            setEditing(post.id);
            setForm({
              title: post.title,
              slug: post.slug,
              content: post.content,
              metaTitle: post.meta_title,
              metaDescription: post.meta_description,
              datePublished: post.date_published || new Date().toISOString().slice(0, 10)
            });
            setShowPreview(false);
          };

          const handleSave = async () => {
            try {
              const updated = await updateBlogPost(editing, {
                title: form.title,
                slug: form.slug,
                content: form.content,
                meta_title: form.metaTitle,
                meta_description: form.metaDescription,
                date_published: form.datePublished
              });
              setPosts(posts.map(p => p.id === editing ? updated : p));
              setEditing(null);
              setShowPreview(true);
            } catch (err) {
              alert('Failed to update post: ' + err.message);
            }
          };

          const handleAdd = async () => {
            try {
              const newPost = await addBlogPost({
                title: form.title,
                slug: form.slug,
                content: form.content,
                meta_title: form.metaTitle,
                meta_description: form.metaDescription,
                date_published: form.datePublished
              });
              setPosts([...posts, newPost]);
              setForm({
                title: '',
                slug: '',
                content: '',
                metaTitle: '',
                metaDescription: '',
                datePublished: new Date().toISOString().slice(0, 10)
              });
              setShowPreview(true);
            } catch (err) {
              alert('Failed to add post: ' + err.message);
            }
          };

          const handleDelete = async (id) => {
            if (window.confirm('Delete this post?')) {
              try {
                await deleteBlogPost(id);
                setPosts(posts.filter(p => p.id !== id));
              } catch (err) {
                alert('Failed to delete post: ' + err.message);
              }
            }
          };

          return (
            <div style={{ maxWidth: 800, margin: '40px auto', padding: 24, background: '#f9f9f9', borderRadius: 12, boxShadow: '0 2px 8px #ddd' }}>
              <h2 style={{ textAlign: 'center', marginBottom: 24 }}>Blogpost CMS</h2>
              <form style={{ display: 'flex', flexDirection: 'column', gap: 12, background: '#fff', padding: 20, borderRadius: 8, boxShadow: '0 1px 4px #eee' }}>
                <input className="cms-input" placeholder="Title" value={form.title} onChange={e => handleTitleChange(e.target.value)} />
                <input className="cms-input" placeholder="Slug" value={form.slug} readOnly />
                <textarea className="cms-input" placeholder="Content" value={form.content} onChange={e => setForm({ ...form, content: e.target.value })} rows={4} />
                <input className="cms-input" placeholder="Meta Title" value={form.metaTitle} readOnly />
                <input className="cms-input" placeholder="Meta Description" value={form.metaDescription} readOnly />
                <input className="cms-input" type="date" placeholder="Date Published" value={form.datePublished} onChange={e => setForm({ ...form, datePublished: e.target.value })} />
                <div style={{ display: 'flex', gap: 12 }}>
                  {editing ? (
                    <button type="button" onClick={handleSave} style={{ background: '#007bff', color: '#fff', border: 'none', padding: '8px 16px', borderRadius: 4 }}>Save</button>
                  ) : (
                    <button type="button" onClick={handleAdd} style={{ background: '#28a745', color: '#fff', border: 'none', padding: '8px 16px', borderRadius: 4 }}>Add</button>
                  )}
                  <button type="button" onClick={() => setShowPreview(true)} style={{ background: '#6c757d', color: '#fff', border: 'none', padding: '8px 16px', borderRadius: 4 }}>Preview</button>
                </div>
              </form>

              {/* Preview Module */}
              {showPreview && (
                <div style={{ marginTop: 32, background: '#fff', padding: 20, borderRadius: 8, boxShadow: '0 1px 4px #eee' }}>
                  <h3>Post Preview</h3>
                  <h4>{form.title || '(No Title)'}</h4>
                  <p><strong>Slug:</strong> {form.slug}</p>
                  <p><strong>Date Published:</strong> {form.datePublished}</p>
                  <div style={{ margin: '12px 0', whiteSpace: 'pre-wrap', background: '#f6f6f6', padding: 12, borderRadius: 4 }}>
                    {form.content || '(No Content)'}
                  </div>
                  <div style={{ fontSize: '0.95em', color: '#555' }}>
                    <p><strong>Meta Title:</strong> {form.metaTitle}</p>
                    <p><strong>Meta Description:</strong> {form.metaDescription}</p>
                  </div>
                  {form.slug && (
                    <a href={`/${form.slug}`} target="_blank" rel="noopener" style={{ display: 'inline-block', marginTop: 16, background: '#007bff', color: '#fff', padding: '8px 16px', borderRadius: 4, textDecoration: 'none' }}>Open Post Page</a>
                  )}
                </div>
              )}

              <div style={{ marginTop: 40 }}>
                <h3>All Blogposts</h3>
                <ul style={{ listStyle: 'none', padding: 0 }}>
                  {posts.map(post => (
                    <li key={post.id} style={{ background: '#fff', marginBottom: 12, padding: 16, borderRadius: 8, boxShadow: '0 1px 4px #eee', display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                      <div>
                        <strong>{post.title}</strong> <span style={{ color: '#888' }}>({post.slug})</span>
                      </div>
                      <div style={{ display: 'flex', gap: 8 }}>
                        <button onClick={() => handleEdit(post)} style={{ background: '#ffc107', color: '#333', border: 'none', padding: '6px 12px', borderRadius: 4 }}>Edit</button>
                        <a href={`/${post.slug}`} target="_blank" rel="noopener" style={{ background: '#007bff', color: '#fff', padding: '6px 12px', borderRadius: 4, textDecoration: 'none' }}>View</a>
                        <button onClick={() => handleDelete(post.id)} style={{ background: '#dc3545', color: '#fff', border: 'none', padding: '6px 12px', borderRadius: 4 }}>Delete</button>
                      </div>
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          );
        }
